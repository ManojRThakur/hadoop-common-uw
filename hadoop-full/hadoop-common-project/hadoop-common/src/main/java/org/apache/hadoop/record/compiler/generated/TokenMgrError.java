/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.record.compiler.generated;

import ostrusted.quals.OsUntrusted;
import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;

/**
 * @deprecated Replaced by <a href="http://hadoop.apache.org/avro/">Avro</a>.
 */
@Deprecated
@InterfaceAudience.Public
@InterfaceStability.Stable
public class TokenMgrError extends @OsUntrusted Error
{
  /*
   * Ordinals for various reasons why an Error of this type can be thrown.
   */

  /**
   * Lexical error occured.
   */
  static final @OsUntrusted int LEXICAL_ERROR = 0;

  /**
   * An attempt wass made to create a second instance of a static token manager.
   */
  static final @OsUntrusted int STATIC_LEXER_ERROR = 1;

  /**
   * Tried to change to an invalid lexical state.
   */
  static final @OsUntrusted int INVALID_LEXICAL_STATE = 2;

  /**
   * Detected (and bailed out of) an infinite loop in the token manager.
   */
  static final @OsUntrusted int LOOP_DETECTED = 3;

  /**
   * Indicates the reason why the exception is thrown. It will have
   * one of the above 4 values.
   */
  @OsUntrusted
  int errorCode;

  /**
   * Replaces unprintable characters by their espaced (or unicode escaped)
   * equivalents in the given string
   */
  protected static final @OsUntrusted String addEscapes(@OsUntrusted String str) {
    @OsUntrusted
    StringBuffer retval = new @OsUntrusted StringBuffer();
    @OsUntrusted
    char ch;
    for (@OsUntrusted int i = 0; i < str.length(); i++) {
      switch (str.charAt(i))
        {
        case 0 :
          continue;
        case '\b':
          retval.append("\\b");
          continue;
        case '\t':
          retval.append("\\t");
          continue;
        case '\n':
          retval.append("\\n");
          continue;
        case '\f':
          retval.append("\\f");
          continue;
        case '\r':
          retval.append("\\r");
          continue;
        case '\"':
          retval.append("\\\"");
          continue;
        case '\'':
          retval.append("\\\'");
          continue;
        case '\\':
          retval.append("\\\\");
          continue;
        default:
          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
            @OsUntrusted
            String s = "0000" + Integer.toString(ch, 16);
            retval.append("\\u" + s.substring(s.length() - 4, s.length()));
          } else {
            retval.append(ch);
          }
          continue;
        }
    }
    return retval.toString();
  }

  /**
   * Returns a detailed message for the Error when it is thrown by the
   * token manager to indicate a lexical error.
   * Parameters : 
   *    EOFSeen     : indicates if EOF caused the lexicl error
   *    curLexState : lexical state in which this error occured
   *    errorLine   : line number when the error occured
   *    errorColumn : column number when the error occured
   *    errorAfter  : prefix that was seen before this error occured
   *    curchar     : the offending character
   * Note: You can customize the lexical error message by modifying this method.
   */
  protected static @OsUntrusted String LexicalError(@OsUntrusted boolean EOFSeen, @OsUntrusted int lexState, @OsUntrusted int errorLine, @OsUntrusted int errorColumn, @OsUntrusted String errorAfter, @OsUntrusted char curChar) {
    return("Lexical error at line " +
           errorLine + ", column " +
           errorColumn + ".  Encountered: " +
           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (@OsUntrusted int)curChar + "), ") +
           "after : \"" + addEscapes(errorAfter) + "\"");
  }

  /**
   * You can also modify the body of this method to customize your error messages.
   * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
   * of end-users concern, so you can return something like : 
   *
   *     "Internal Error : Please file a bug report .... "
   *
   * from this method for such cases in the release version of your parser.
   */
  @Override
  public @OsUntrusted String getMessage(@OsUntrusted TokenMgrError this) {
    return super.getMessage();
  }

  /*
   * Constructors of various flavors follow.
   */

  public @OsUntrusted TokenMgrError() {
  }

  public @OsUntrusted TokenMgrError(@OsUntrusted String message, @OsUntrusted int reason) {
    super(message);
    errorCode = reason;
  }

  public @OsUntrusted TokenMgrError(@OsUntrusted boolean EOFSeen, @OsUntrusted int lexState, @OsUntrusted int errorLine, @OsUntrusted int errorColumn, @OsUntrusted String errorAfter, @OsUntrusted char curChar, @OsUntrusted int reason) {
    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
  }
}
