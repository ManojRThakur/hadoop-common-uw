/* Generated By:JavaCC: Do not edit this line. RccTokenManager.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.record.compiler.generated;
import ostrusted.quals.OsUntrusted;
import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;

/**
 * @deprecated Replaced by <a href="http://hadoop.apache.org/avro/">Avro</a>.
 */
@Deprecated
@InterfaceAudience.Public
@InterfaceStability.Stable
public class RccTokenManager implements @OsUntrusted RccConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(@OsUntrusted RccTokenManager this, java.io.PrintStream ds) { debugStream = ds; }
  private final @OsUntrusted int jjMoveStringLiteralDfa0_1(@OsUntrusted RccTokenManager this)
  {
    return jjMoveNfa_1(0, 0);
  }
  private final void jjCheckNAdd(@OsUntrusted RccTokenManager this, @OsUntrusted int state)
  {
    if (jjrounds[state] != jjround)
      {
        jjstateSet[jjnewStateCnt++] = state;
        jjrounds[state] = jjround;
      }
  }
  private final void jjAddStates(@OsUntrusted RccTokenManager this, @OsUntrusted int start, @OsUntrusted int end)
  {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }
  private final void jjCheckNAddTwoStates(@OsUntrusted RccTokenManager this, @OsUntrusted int state1, @OsUntrusted int state2)
  {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }
  private final void jjCheckNAddStates(@OsUntrusted RccTokenManager this, @OsUntrusted int start, @OsUntrusted int end)
  {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }
  private final void jjCheckNAddStates(@OsUntrusted RccTokenManager this, @OsUntrusted int start)
  {
    jjCheckNAdd(jjnextStates[start]);
    jjCheckNAdd(jjnextStates[start + 1]);
  }
  private final @OsUntrusted int jjMoveNfa_1(@OsUntrusted RccTokenManager this, @OsUntrusted int startState, @OsUntrusted int curPos)
  {
    @OsUntrusted
    int @OsUntrusted [] nextStates;
    @OsUntrusted
    int startsAt = 0;
    jjnewStateCnt = 3;
    @OsUntrusted
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (;;)
      {
        if (++jjround == 0x7fffffff)
          ReInitRounds();
        if (curChar < 64)
          {
            @OsUntrusted
            long l = 1L << curChar;
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  case 0:
                    if ((0x2400L & l) != 0L)
                      {
                        if (kind > 6)
                          kind = 6;
                      }
                    if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                    break;
                  case 1:
                    if (curChar == 10 && kind > 6)
                      kind = 6;
                    break;
                  case 2:
                    if (curChar == 13)
                      jjstateSet[jjnewStateCnt++] = 1;
                    break;
                  default : break;
                  }
              } while(i != startsAt);
          }
        else if (curChar < 128)
          {
            @OsUntrusted
            long l = 1L << (curChar & 077);
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  default : break;
                  }
              } while(i != startsAt);
          }
        else
          {
            @OsUntrusted
            int i2 = (curChar & 0xff) >> 6;
            @OsUntrusted
            long l2 = 1L << (curChar & 077);
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  default : break;
                  }
              } while(i != startsAt);
          }
        if (kind != 0x7fffffff)
          {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
          }
        ++curPos;
        if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
          return curPos;
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) { return curPos; }
      }
  }
  private final @OsUntrusted int jjStopStringLiteralDfa_0(@OsUntrusted RccTokenManager this, @OsUntrusted int pos, @OsUntrusted long active0)
  {
    switch (pos)
      {
      case 0:
        if ((active0 & 0xfff800L) != 0L)
          {
            jjmatchedKind = 32;
            return 4;
          }
        return -1;
      case 1:
        if ((active0 & 0xfff800L) != 0L)
          {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 4;
          }
        return -1;
      case 2:
        if ((active0 & 0x7ef800L) != 0L)
          {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 4;
          }
        if ((active0 & 0x810000L) != 0L)
          return 4;
        return -1;
      case 3:
        if ((active0 & 0x24000L) != 0L)
          return 4;
        if ((active0 & 0x7cb800L) != 0L)
          {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 4;
          }
        return -1;
      case 4:
        if ((active0 & 0x41000L) != 0L)
          return 4;
        if ((active0 & 0x78a800L) != 0L)
          {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 4;
          }
        return -1;
      case 5:
        if ((active0 & 0x680800L) != 0L)
          return 4;
        if ((active0 & 0x10a000L) != 0L)
          {
            jjmatchedKind = 32;
            jjmatchedPos = 5;
            return 4;
          }
        return -1;
      default :
        return -1;
      }
  }
  private final @OsUntrusted int jjStartNfa_0(@OsUntrusted RccTokenManager this, @OsUntrusted int pos, @OsUntrusted long active0)
  {
    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
  }
  private final @OsUntrusted int jjStopAtPos(@OsUntrusted RccTokenManager this, @OsUntrusted int pos, @OsUntrusted int kind)
  {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }
  private final @OsUntrusted int jjStartNfaWithStates_0(@OsUntrusted RccTokenManager this, @OsUntrusted int pos, @OsUntrusted int kind, @OsUntrusted int state)
  {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) { return pos + 1; }
    return jjMoveNfa_0(state, pos + 1);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa0_0(@OsUntrusted RccTokenManager this)
  {
    switch(curChar)
      {
      case 44:
        return jjStopAtPos(0, 29);
      case 46:
        return jjStopAtPos(0, 30);
      case 47:
        return jjMoveStringLiteralDfa1_0(0x120L);
      case 59:
        return jjStopAtPos(0, 28);
      case 60:
        return jjStopAtPos(0, 26);
      case 62:
        return jjStopAtPos(0, 27);
      case 98:
        return jjMoveStringLiteralDfa1_0(0x20c000L);
      case 99:
        return jjMoveStringLiteralDfa1_0(0x1000L);
      case 100:
        return jjMoveStringLiteralDfa1_0(0x80000L);
      case 102:
        return jjMoveStringLiteralDfa1_0(0x40000L);
      case 105:
        return jjMoveStringLiteralDfa1_0(0x12000L);
      case 108:
        return jjMoveStringLiteralDfa1_0(0x20000L);
      case 109:
        return jjMoveStringLiteralDfa1_0(0x800800L);
      case 117:
        return jjMoveStringLiteralDfa1_0(0x100000L);
      case 118:
        return jjMoveStringLiteralDfa1_0(0x400000L);
      case 123:
        return jjStopAtPos(0, 24);
      case 125:
        return jjStopAtPos(0, 25);
      default :
        return jjMoveNfa_0(0, 0);
      }
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa1_0(@OsUntrusted RccTokenManager this, @OsUntrusted long active0)
  {
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
    }
    switch(curChar)
      {
      case 42:
        if ((active0 & 0x100L) != 0L)
          return jjStopAtPos(1, 8);
        break;
      case 47:
        if ((active0 & 0x20L) != 0L)
          return jjStopAtPos(1, 5);
        break;
      case 97:
        return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 101:
        return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 108:
        return jjMoveStringLiteralDfa2_0(active0, 0x41000L);
      case 110:
        return jjMoveStringLiteralDfa2_0(active0, 0x12000L);
      case 111:
        return jjMoveStringLiteralDfa2_0(active0, 0xa8800L);
      case 115:
        return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 117:
        return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 121:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
        break;
      }
    return jjStartNfa_0(0, active0);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa2_0(@OsUntrusted RccTokenManager this, @OsUntrusted long old0, @OsUntrusted long active0)
  {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
    }
    switch(curChar)
      {
      case 97:
        return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 99:
        return jjMoveStringLiteralDfa3_0(active0, 0x402000L);
      case 100:
        return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 102:
        return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 110:
        return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 111:
        return jjMoveStringLiteralDfa3_0(active0, 0x48000L);
      case 112:
        if ((active0 & 0x800000L) != 0L)
          return jjStartNfaWithStates_0(2, 23, 4);
        break;
      case 116:
        if ((active0 & 0x10000L) != 0L)
          return jjStartNfaWithStates_0(2, 16, 4);
        return jjMoveStringLiteralDfa3_0(active0, 0x104000L);
      case 117:
        return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      default :
        break;
      }
    return jjStartNfa_0(1, active0);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa3_0(@OsUntrusted RccTokenManager this, @OsUntrusted long old0, @OsUntrusted long active0)
  {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
    }
    switch(curChar)
      {
      case 97:
        return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 98:
        return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 101:
        if ((active0 & 0x4000L) != 0L)
          return jjStartNfaWithStates_0(3, 14, 4);
        break;
      case 102:
        return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 103:
        if ((active0 & 0x20000L) != 0L)
          return jjStartNfaWithStates_0(3, 17, 4);
        break;
      case 108:
        return jjMoveStringLiteralDfa4_0(active0, 0xa000L);
      case 114:
        return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 115:
        return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 116:
        return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 117:
        return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      default :
        break;
      }
    return jjStartNfa_0(2, active0);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa4_0(@OsUntrusted RccTokenManager this, @OsUntrusted long old0, @OsUntrusted long active0)
  {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
    }
    switch(curChar)
      {
      case 101:
        return jjMoveStringLiteralDfa5_0(active0, 0x208000L);
      case 105:
        return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 108:
        return jjMoveStringLiteralDfa5_0(active0, 0x80800L);
      case 111:
        return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 115:
        if ((active0 & 0x1000L) != 0L)
          return jjStartNfaWithStates_0(4, 12, 4);
        break;
      case 116:
        if ((active0 & 0x40000L) != 0L)
          return jjStartNfaWithStates_0(4, 18, 4);
        break;
      case 117:
        return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
        break;
      }
    return jjStartNfa_0(3, active0);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa5_0(@OsUntrusted RccTokenManager this, @OsUntrusted long old0, @OsUntrusted long active0)
  {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
    }
    switch(curChar)
      {
      case 97:
        return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 100:
        return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
        if ((active0 & 0x800L) != 0L)
          return jjStartNfaWithStates_0(5, 11, 4);
        else if ((active0 & 0x80000L) != 0L)
          return jjStartNfaWithStates_0(5, 19, 4);
        break;
      case 110:
        return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 114:
        if ((active0 & 0x200000L) != 0L)
          return jjStartNfaWithStates_0(5, 21, 4);
        else if ((active0 & 0x400000L) != 0L)
          return jjStartNfaWithStates_0(5, 22, 4);
        break;
      default :
        break;
      }
    return jjStartNfa_0(4, active0);
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa6_0(@OsUntrusted RccTokenManager this, @OsUntrusted long old0, @OsUntrusted long active0)
  {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
    }
    switch(curChar)
      {
      case 101:
        if ((active0 & 0x2000L) != 0L)
          return jjStartNfaWithStates_0(6, 13, 4);
        break;
      case 103:
        if ((active0 & 0x100000L) != 0L)
          return jjStartNfaWithStates_0(6, 20, 4);
        break;
      case 110:
        if ((active0 & 0x8000L) != 0L)
          return jjStartNfaWithStates_0(6, 15, 4);
        break;
      default :
        break;
      }
    return jjStartNfa_0(5, active0);
  }
  static final @OsUntrusted long @OsUntrusted [] jjbitVec0 = new long @OsUntrusted [] {
    0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
  };
  private final @OsUntrusted int jjMoveNfa_0(@OsUntrusted RccTokenManager this, @OsUntrusted int startState, @OsUntrusted int curPos)
  {
    @OsUntrusted
    int @OsUntrusted [] nextStates;
    @OsUntrusted
    int startsAt = 0;
    jjnewStateCnt = 5;
    @OsUntrusted
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (;;)
      {
        if (++jjround == 0x7fffffff)
          ReInitRounds();
        if (curChar < 64)
          {
            @OsUntrusted
            long l = 1L << curChar;
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  case 0:
                    if (curChar == 34)
                      jjCheckNAdd(1);
                    break;
                  case 1:
                    if ((0xfffffffbffffffffL & l) != 0L)
                      jjCheckNAddTwoStates(1, 2);
                    break;
                  case 2:
                    if (curChar == 34 && kind > 31)
                      kind = 31;
                    break;
                  case 4:
                    if ((0x3ff000000000000L & l) == 0L)
                      break;
                    if (kind > 32)
                      kind = 32;
                    jjstateSet[jjnewStateCnt++] = 4;
                    break;
                  default : break;
                  }
              } while(i != startsAt);
          }
        else if (curChar < 128)
          {
            @OsUntrusted
            long l = 1L << (curChar & 077);
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  case 0:
                    if ((0x7fffffe07fffffeL & l) == 0L)
                      break;
                    if (kind > 32)
                      kind = 32;
                    jjCheckNAdd(4);
                    break;
                  case 1:
                    jjAddStates(0, 1);
                    break;
                  case 4:
                    if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
                    if (kind > 32)
                      kind = 32;
                    jjCheckNAdd(4);
                    break;
                  default : break;
                  }
              } while(i != startsAt);
          }
        else
          {
            @OsUntrusted
            int i2 = (curChar & 0xff) >> 6;
            @OsUntrusted
            long l2 = 1L << (curChar & 077);
            MatchLoop: do
              {
                switch(jjstateSet[--i])
                  {
                  case 1:
                    if ((jjbitVec0[i2] & l2) != 0L)
                      jjAddStates(0, 1);
                    break;
                  default : break;
                  }
              } while(i != startsAt);
          }
        if (kind != 0x7fffffff)
          {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
          }
        ++curPos;
        if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
          return curPos;
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) { return curPos; }
      }
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa0_2(@OsUntrusted RccTokenManager this)
  {
    switch(curChar)
      {
      case 42:
        return jjMoveStringLiteralDfa1_2(0x200L);
      default :
        return 1;
      }
  }
  private final @OsUntrusted int jjMoveStringLiteralDfa1_2(@OsUntrusted RccTokenManager this, @OsUntrusted long active0)
  {
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
      return 1;
    }
    switch(curChar)
      {
      case 47:
        if ((active0 & 0x200L) != 0L)
          return jjStopAtPos(1, 9);
        break;
      default :
        return 2;
      }
    return 2;
  }
  static final @OsUntrusted int @OsUntrusted [] jjnextStates = new int @OsUntrusted [] {
    1, 2, 
  };
  public static final @OsUntrusted String @OsUntrusted [] jjstrLiteralImages = new String @OsUntrusted [] {
    "", null, null, null, null, null, null, null, null, null, null, 
    "\155\157\144\165\154\145", "\143\154\141\163\163", "\151\156\143\154\165\144\145", "\142\171\164\145", 
    "\142\157\157\154\145\141\156", "\151\156\164", "\154\157\156\147", "\146\154\157\141\164", 
    "\144\157\165\142\154\145", "\165\163\164\162\151\156\147", "\142\165\146\146\145\162", 
    "\166\145\143\164\157\162", "\155\141\160", "\173", "\175", "\74", "\76", "\73", "\54", "\56", null, null, };
  public static final @OsUntrusted String @OsUntrusted [] lexStateNames = new String @OsUntrusted [] {
    "DEFAULT", 
    "WithinOneLineComment", 
    "WithinMultiLineComment", 
  };
  public static final @OsUntrusted int @OsUntrusted [] jjnewLexState = new int @OsUntrusted [] {
    -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 
  };
  static final @OsUntrusted long @OsUntrusted [] jjtoToken = new long @OsUntrusted [] {
    0x1fffff801L, 
  };
  static final @OsUntrusted long @OsUntrusted [] jjtoSkip = new long @OsUntrusted [] {
    0x37eL, 
  };
  static final @OsUntrusted long @OsUntrusted [] jjtoSpecial = new long @OsUntrusted [] {
    0x360L, 
  };
  static final @OsUntrusted long @OsUntrusted [] jjtoMore = new long @OsUntrusted [] {
    0x480L, 
  };
  protected @OsUntrusted SimpleCharStream input_stream;
  private final @OsUntrusted int @OsUntrusted [] jjrounds = new @OsUntrusted int @OsUntrusted [5];
  private final @OsUntrusted int @OsUntrusted [] jjstateSet = new @OsUntrusted int @OsUntrusted [10];
  @OsUntrusted
  StringBuffer image;
  @OsUntrusted
  int jjimageLen;
  @OsUntrusted
  int lengthOfMatch;
  protected @OsUntrusted char curChar;
  public @OsUntrusted RccTokenManager(@OsUntrusted SimpleCharStream stream){
    if (SimpleCharStream.staticFlag)
      throw new @OsUntrusted Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    input_stream = stream;
  }
  public @OsUntrusted RccTokenManager(@OsUntrusted SimpleCharStream stream, @OsUntrusted int lexState){
    this(stream);
    SwitchTo(lexState);
  }
  public void ReInit(@OsUntrusted RccTokenManager this, @OsUntrusted SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }
  private final void ReInitRounds(@OsUntrusted RccTokenManager this)
  {
    @OsUntrusted
    int i;
    jjround = 0x80000001;
    for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }
  public void ReInit(@OsUntrusted RccTokenManager this, @OsUntrusted SimpleCharStream stream, @OsUntrusted int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }
  public void SwitchTo(@OsUntrusted RccTokenManager this, @OsUntrusted int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new @OsUntrusted TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

  protected @OsUntrusted Token jjFillToken(@OsUntrusted RccTokenManager this)
  {
    @OsUntrusted
    Token t = Token.newToken(jjmatchedKind);
    t.kind = jjmatchedKind;
    @OsUntrusted
    String im = jjstrLiteralImages[jjmatchedKind];
    t.image = (im == null) ? input_stream.GetImage() : im;
    t.beginLine = input_stream.getBeginLine();
    t.beginColumn = input_stream.getBeginColumn();
    t.endLine = input_stream.getEndLine();
    t.endColumn = input_stream.getEndColumn();
    return t;
  }

  @OsUntrusted
  int curLexState = 0;
  @OsUntrusted
  int defaultLexState = 0;
  @OsUntrusted
  int jjnewStateCnt;
  @OsUntrusted
  int jjround;
  @OsUntrusted
  int jjmatchedPos;
  @OsUntrusted
  int jjmatchedKind;

  public @OsUntrusted Token getNextToken(@OsUntrusted RccTokenManager this) 
  {
    @OsUntrusted
    int kind;
    @OsUntrusted
    Token specialToken = null;
    @OsUntrusted
    Token matchedToken;
    @OsUntrusted
    int curPos = 0;

    EOFLoop :
      for (;;)
        {   
          try   
            {     
              curChar = input_stream.BeginToken();
            }     
          catch(java.io.IOException e)
            {        
              jjmatchedKind = 0;
              matchedToken = jjFillToken();
              matchedToken.specialToken = specialToken;
              return matchedToken;
            }
          image = null;
          jjimageLen = 0;

          for (;;)
            {
              switch(curLexState)
                {
                case 0:
                  try { input_stream.backup(0);
                  while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
                  }
                  catch (java.io.IOException e1) { continue EOFLoop; }
                  jjmatchedKind = 0x7fffffff;
                  jjmatchedPos = 0;
                  curPos = jjMoveStringLiteralDfa0_0();
                  break;
                case 1:
                  jjmatchedKind = 0x7fffffff;
                  jjmatchedPos = 0;
                  curPos = jjMoveStringLiteralDfa0_1();
                  if (jjmatchedPos == 0 && jjmatchedKind > 7)
                    {
                      jjmatchedKind = 7;
                    }
                  break;
                case 2:
                  jjmatchedKind = 0x7fffffff;
                  jjmatchedPos = 0;
                  curPos = jjMoveStringLiteralDfa0_2();
                  if (jjmatchedPos == 0 && jjmatchedKind > 10)
                    {
                      jjmatchedKind = 10;
                    }
                  break;
                }
              if (jjmatchedKind != 0x7fffffff)
                {
                  if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                  if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                    {
                      matchedToken = jjFillToken();
                      matchedToken.specialToken = specialToken;
                      if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                      return matchedToken;
                    }
                  else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                    {
                      if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                        {
                          matchedToken = jjFillToken();
                          if (specialToken == null)
                            specialToken = matchedToken;
                          else
                            {
                              matchedToken.specialToken = specialToken;
                              specialToken = (specialToken.next = matchedToken);
                            }
                          SkipLexicalActions(matchedToken);
                        }
                      else 
                        SkipLexicalActions(null);
                      if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                      continue EOFLoop;
                    }
                  jjimageLen += jjmatchedPos + 1;
                  if (jjnewLexState[jjmatchedKind] != -1)
                    curLexState = jjnewLexState[jjmatchedKind];
                  curPos = 0;
                  jjmatchedKind = 0x7fffffff;
                  try {
                    curChar = input_stream.readChar();
                    continue;
                  }
                  catch (java.io.IOException e1) { }
                }
              @OsUntrusted
              int error_line = input_stream.getEndLine();
              @OsUntrusted
              int error_column = input_stream.getEndColumn();
              @OsUntrusted
              String error_after = null;
              @OsUntrusted
              boolean EOFSeen = false;
              try { input_stream.readChar(); input_stream.backup(1); }
              catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                  error_line++;
                  error_column = 0;
                }
                else
                  error_column++;
              }
              if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
              }
              throw new @OsUntrusted TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
  }

  void SkipLexicalActions(@OsUntrusted RccTokenManager this, @OsUntrusted Token matchedToken)
  {
    switch(jjmatchedKind)
      {
      default :
        break;
      }
  }
}
