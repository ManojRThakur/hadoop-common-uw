
package ostrusted.quals:
annotation @OsUntrusted:
package ostrusted.quals:
annotation @OsTrusted:


package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
local nfe:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method calculateSleepTime(I)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method exponentialBackoffRetry(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field exceptionToPolicyMap:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
local multipleLinearRandomRetry:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method calculateSleepTime(I)J:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method toString()Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RETRY_FOREVER:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field currentProxy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
field myString:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method calculateSleepTime(I)J:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field defaultPolicy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$1:
method initialValue()Ljava/util/Random;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method calculateSleepTime(I)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local result:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
local enabled:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method equals(Ljava/lang/Object;)Z:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field RETRY:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;I)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
parameter 0:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method <init>(Ljava/lang/Class;Ljava/lang/Object;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local msg:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method <init>(Ljava/lang/Class;Ljava/lang/Object;)V:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field methodNameToPolicyMap:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method toString()Ljava/lang/String;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
field pairs:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method <init>(ILorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method getConnectionId()Lorg/apache/hadoop/ipc/Client$ConnectionId;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
new *2: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
local baseTime:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
insert-annotation Block.statement 0, Return.expression, MethodInvocation.typeArgument 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
local unwrapped:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;J)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithProportionalSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method formatSleepMessage(J)Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local sleepTime:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method toString()Ljava/lang/String;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method calculateSleepTime(I)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
method <init>(JJLjava/util/concurrent/TimeUnit;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method equals(Ljava/lang/Object;)Z:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *2: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
insert-annotation Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.typeArgument 1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *5: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local p:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
typeparam 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
field numRetries:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *1:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
return:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local retries:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local pairs:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JI)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local worthLogging:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
field exceptionNameToPolicyMap:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumTimeWithFixedSleep(JJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method <init>(II)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
typeparam 0 : @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method calculateSleepTime(I)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field LOG:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method getFailoverOrRetrySleepTime(I)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field delayMillis:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
field exceptionNameToPolicyMap:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
instanceof *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *6: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method getProxy()Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
field delayMillis:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
typecast *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field exceptionToPolicyMap:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
field myString:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method equals(Ljava/lang/Object;)Z:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
field numToDrop:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(I)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method close()V:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field reason:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field hasMadeASuccessfulCall:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local elements:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumTimeWithFixedSleep(JJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
field maxFailovers:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;I)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method formatSleepMessage(J)Ljava/lang/String;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction$RetryDecision:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field FAIL:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method exponentialBackoffRetry(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method equals(Ljava/lang/Object;)Z:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
field sleepMillis:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method getProxy()Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field exceptionToPolicyMap:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method toString()Ljava/lang/String;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method <init>(II)V:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$1:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;J)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field defaultPolicy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;I)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(I)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;J)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
field exceptionNameToPolicyMap:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
field fallbackPolicy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field proxyProvider:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
typeparam 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field RETRY:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method hashCode()I:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
local e:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
field iface:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field proxyProvider:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method performFailover(Ljava/lang/Object;)V:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
typeparam 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method searchPair(I)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry$Pair;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method performFailover(Ljava/lang/Object;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method <init>(Ljava/util/List;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
local e:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
local unwrapped:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method close()V:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method <init>(Ljava/lang/Class;Ljava/lang/Object;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JIJ)J:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
bound 0 & 0:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method <init>(II)V:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field exceptionToPolicyMap:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method <init>(Ljava/util/List;)V:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local retryCount:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumTimeWithFixedSleep(JJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method calculateSleepTime(I)J:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 4:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local retries:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method toString()Ljava/lang/String;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local action:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 2:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
typeparam 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local policy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 4:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local isRpc:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method exponentialBackoffRetry(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;JLjava/lang/String;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method <init>(Ljava/lang/Class;Ljava/lang/Object;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *4: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *2: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$1:
method initialValue()Ljava/util/Random;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithFixedSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local policy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithProportionalSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method <init>(Ljava/util/List;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method exponentialBackoffRetry(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method equals(Ljava/lang/Object;)Z:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JI)J:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local elements:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method hashCode()I:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method <init>(ILorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
bound 0 & 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local i:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
field exceptionToPolicyMap:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *2: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;I)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;JLjava/lang/String;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;I)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local callId:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method getFailoverOrRetrySleepTime(I)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method calculateSleepTime(I)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method isWrappedStandbyException(Ljava/lang/Exception;)Z:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RANDOM:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method calculateSleepTime(I)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method performFailover(Ljava/lang/Object;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithProportionalSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
field LOG:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method <init>(ILorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
field RetryCount:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
bound 0 & 0:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithFixedSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method getProxy()Ljava/lang/Object;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *7: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field FAIL:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithFixedSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
local r:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction$RetryDecision:
field RETRY:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
instanceof *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;JLjava/lang/String;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method toString()Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
instanceof *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
typeparam 0 : @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local e:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
method <init>(JJLjava/util/concurrent/TimeUnit;)V:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 2:
type:
inner-type 0,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$1:
method initialValue()Ljava/util/Random;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
field RetryCount:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
field maxRetries:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
typecast *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction$RetryDecision:
field FAIL:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction$RetryDecision;JLjava/lang/String;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
field proxy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
local e:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method equals(Ljava/lang/Object;)Z:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RANDOM:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local policy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
field RetryCount:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumTimeWithFixedSleep(JJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method getConnectionId()Lorg/apache/hadoop/ipc/Client$ConnectionId;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
local s:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumTimeWithFixedSleep(JJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method <init>(Ljava/util/List;)V:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method calculateSleepTime(I)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 5:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *0:
inner-type 0,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method calculateSleepTime(I)J:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method <init>()V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
method <init>(JJLjava/util/concurrent/TimeUnit;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field action:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method getFailoverOrRetrySleepTime(I)J:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExponentialBackoffRetry:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method performFailover(Ljava/lang/Object;)V:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RANDOM:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithProportionalSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 2:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field methodNameToPolicyMap:
type:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method toString()Ljava/lang/String;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method toString()Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method searchPair(I)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry$Pair;:
local i:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *3: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;I)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithProportionalSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
local e:
type:
inner-type 3,0, 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method toString()Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local re:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local invocationAttemptFailoverCount:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method getProxy()Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
insert-annotation Block.statement 0, Return.expression, MethodInvocation.typeArgument 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *4: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
local policy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field TRY_ONCE_THEN_FAIL:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithFixedSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local re:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method searchPair(I)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry$Pair;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
field iface:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local ret:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithProportionalSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
method <init>(JJLjava/util/concurrent/TimeUnit;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local isIdempotentOrAtMostOnce:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
field defaultPolicy:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method <init>(Ljava/util/List;)V:
insert-annotation Block.statement 2, ExpressionStatement.expression, Assignment.expression, MethodInvocation.typeArgument 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumTimeWithFixedSleep:
method <init>(JJLjava/util/concurrent/TimeUnit;)V:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
bound 0 & 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RETRY_FOREVER:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
field maxDelayBase:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parsePositiveInt([Ljava/lang/String;ILjava/lang/String;)I:
local n:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method getWrappedRetriableException(Ljava/lang/Exception;)Lorg/apache/hadoop/ipc/RetriableException;:
instanceof *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method calculateSleepTime(I)J:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local cause:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field proxyProviderFailoverCount:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method calculateExponentialTime(JI)J:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method hashCode()I:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local invocationFailoverCount:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class DefaultFailoverProxyProvider:
method getInterface()Ljava/lang/Class;:
return:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getMultipleLinearRandomRetry(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
local ih:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method <init>(ILorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction$RetryDecision:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method isRpcInvocation(Ljava/lang/Object;)Z:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field TRY_ONCE_THEN_FAIL:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
bound 0 & 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local pairs:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method exponentialBackoffRetry(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *3: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local p:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
field RANDOM:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 5:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByRemoteException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
field pairs:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
typeparam 0 : @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V:
parameter 3:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field LOG:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method <init>(II)V:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
receiver:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
insert-annotation Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.typeArgument 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class FailoverProxyProvider:
bound 0 & 0:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method <init>(ILorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
new *0:
inner-type 3,1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
bound 0 & 0:  @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method <init>(Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)V:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method failoverOnNetworkException(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
bound 0 & 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
method toString()Ljava/lang/String;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
typeparam 0 : @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
parameter 2:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
extends: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$TryOnceThenFail:
implements 0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field FAILOVER_AND_RETRY:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method parseCommaSeparatedString(Ljava/lang/String;)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry;:
local sleep:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
field methodNameToPolicyMap:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
field sleepTime:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$ExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
parameter 1:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/Map;)Ljava/lang/Object;:
new *0:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryForever:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
local ratio:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 0:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
parameter 1:
type:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryByException(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry$Pair:
method <init>(II)V:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$FailoverOnNetworkExceptionRetry:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
instanceof *3: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
method hashCode()I:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils:
method getDefaultRetryPolicy(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 5:
type:
inner-type 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *1:
inner-type 3,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryProxy:
method create(Ljava/lang/Class;Lorg/apache/hadoop/io/retry/FailoverProxyProvider;Ljava/util/Map;Lorg/apache/hadoop/io/retry/RetryPolicy;)Ljava/lang/Object;:
new *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction$RetryDecision:
field FAILOVER_AND_RETRY:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryLimited:
field timeUnit:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RetryUpToMaximumCountWithFixedSleep:
method <init>(IJLjava/util/concurrent/TimeUnit;)V:
parameter 1:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$RemoteExceptionDependentRetry:
method <init>(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V:
local e:
type:
inner-type 3,0, 3,0, 2,0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
field RetryCount:
new *0: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies$MultipleLinearRandomRetry:
method searchPair(I)Lorg/apache/hadoop/io/retry/RetryPolicies$MultipleLinearRandomRetry$Pair;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicies:
method retryUpToMaximumCountWithFixedSleep(IJLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/io/retry/RetryPolicy;:
parameter 0:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
local e:
type: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryUtils$1:
method shouldRetry(Ljava/lang/Exception;IIZ)Lorg/apache/hadoop/io/retry/RetryPolicy$RetryAction;:
typecast *1: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class LossyRetryInvocationHandler:
method invokeMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;:
return: @ostrusted.quals.OsUntrusted
package org.apache.hadoop.io.retry:
class RetryPolicy$RetryAction:
field FAILOVER_AND_RETRY:
type: @ostrusted.quals.OsUntrusted

